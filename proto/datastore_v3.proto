// Copyright 2006-2008 Google Inc. All Rights Reserved.
//
// App Engine datastore.

syntax = "proto2";

import "entity.proto";
import "api_base.proto";

package appengine_datastore_v3;

option perl_message_package = "AppEngine::Service::Datastore";
option perl_file_package = "AppEngine::Service::Datastore";

//
// A transaction handle.
//
message Transaction {
  // all possible values from 0 to 2^64 - 1 are valid handles. there is no
  // special "error" or "unset" value.
  required fixed64 handle = 1;
}

//
// Query API
//
message Query {
  required bytes app = 1;

  // kind and ancestor both restrict the query results. if kind is provided,
  // only entities of that kind are returned. if ancestor is provided, only
  // entities descended from that ancestor by path, including the ancestor
  // itself, are returned. either or both must be provided.
  optional bytes kind = 3;
  optional appengine_entity.Reference ancestor = 17;

  // filter based on property values. these AND, not OR, together.
  //
  // when filters are evaluated in memory, they're evaluated in the order
  // they're provided here. you can take advantage of this by putting the most
  // restrictive filters, ie the ones that match the least number of results,
  // first.
  repeated group Filter = 4 {
    enum Operator {
      LESS_THAN = 1;
      LESS_THAN_OR_EQUAL = 2;
      GREATER_THAN = 3;
      GREATER_THAN_OR_EQUAL = 4;
      EQUAL = 5;
      // NOT_EQUAL is intentionally omitted. use IN instead, or use the GQL !=
      // operator: http://code.google.com/appengine/docs/datastore/gqlreference.html
      IN = 6;
      EXISTS = 7;
    }

    required int32 op = 6;
    repeated appengine_entity.Property property = 14;
  }

  // currently not implemented. eventually, when provided, this will be used
  // as a plain-text search query. ideally, it will be combined with any
  // filters, sort orders, and ancestor.
  optional bytes search_query = 8;

  // these apply in the order they're added, e.g. adding ("date", DESC),
  // then adding ("rank", DESC) would sort first by date, descending, then
  // by rank, descending.
  repeated group Order = 9 {
    enum Direction {
      ASCENDING = 1;
      DESCENDING = 2;
    }

    required bytes property = 10;
    optional int32 direction = 11 [default = 1];  // default to ASCENDING
  }

  // start returning results at this offset. useful for paging.
  optional int32 offset = 12 [default = 0];

  // an optional upper bound on the number of results returned for this query.
  optional int32 limit = 16;

  // the composite indexes, if any, that are available to the query planner
  repeated appengine_entity.CompositeIndex composite_index = 19;

  // if true, the datastore will only run this query if there's an index or
  // set of indices that perfectly match it. if not, it will return an error.
  optional bool require_perfect_plan = 20 [default = false];
}

message QueryExplanation {
  // If true, the ancestor constraint was satisfied natively.
  optional bool native_ancestor = 1 [default = false];

  // The native property indexes that were used to satisfy the query, if any.
  // Multiple property indexes may be used, even in conjunction with a native
  // ancestor, in the case of merge join queries. In other cases, only a
  // single index is used.
  repeated appengine_entity.Index native_index = 2;

  // The native offset, if any.
  optional int32 native_offset = 3;

  // The native limit, if any.
  optional int32 native_limit = 4;
}

// A query cursor.
message Cursor {
  // all possible values from 0 to 2^64 - 1 are valid cursors. there is no
  // special "error" or "unset" value.
  required fixed64 cursor = 1;
}

// RPC request and response objects, along with response error codes for error
// handling.
message Error {
  enum ErrorCode {
    BAD_REQUEST = 1;
    CONCURRENT_TRANSACTION = 2;
    INTERNAL_ERROR = 3;
    NEED_INDEX = 4;
    TIMEOUT = 5;
  }
}

message GetRequest {
  repeated appengine_entity.Reference key = 1;
  optional Transaction transaction = 2;
}

message GetResponse {
  // the Entity elements here will match the keys in the GetRequest. The
  // entity field will be set for keys that were found, unset for keys that
  // weren't found.
  repeated group Entity = 1 {
    optional appengine_entity.EntityProto entity = 2;
  }
}

message PutRequest {
  repeated appengine_entity.EntityProto entity = 1;
  optional Transaction transaction = 2;
  repeated appengine_entity.CompositeIndex composite_index = 3;
}

message PutResponse {
  repeated appengine_entity.Reference key = 1;
}

message DeleteRequest {
  repeated appengine_entity.Reference key = 6;
  optional Transaction transaction = 5;
}

message NextRequest {
  required Cursor cursor = 1;
  optional int32 count = 2 [default = 1];
}

message QueryResult {
  // cursor is set in RunQuery() responses, but not in Next() responses
  optional Cursor cursor = 1;
  repeated appengine_entity.EntityProto result = 2;
  required bool more_results = 3;
}

message Schema {
  // includes one entity per kind found in the datastore. each one includes
  // all property names and types found in entities of that kind.
  repeated appengine_entity.EntityProto kind = 1;
}

message CompositeIndices {
  repeated appengine_entity.CompositeIndex index = 1;
}

//
// The datastore's RPC call endpoints.
//
service DatastoreService {
  // Looks up one or more entities by their ids.
  //
  // The GetResponse has an Entity element for each key in the GetRequest.
  // Each Entity.entity field will be filled if its corresponding key matched
  // an existing entity. Otherwise, it will be unset.
  //
  // If the request specifies a transaction, then the lookups occur in the
  // context of that transaction, and the entities must all be in the same
  // group.
  rpc Get(GetRequest) returns (GetResponse) {};

  // Store one or more entities.
  //
  // New entities are inserted, while existing entities are updated. The
  // response contains the keys of the entities written to the datastore, in
  // the same order as the request. Newly inserted entities will have the
  // primary key and app name filled in in the response.
  //
  // If the request specifies a transaction, then the entities are put in the
  // context of that transaction, and the writes will happen when the
  // transaction is committed.
  rpc Put(PutRequest) returns (PutResponse) {};

  // Deletes one or more entities.
  //
  // If the request includes a transaction, then the entities are deleted in
  // the context of that transaction, and the writes will happen when the
  // transaction is committed.
  rpc Delete(DeleteRequest) returns (appengine_base.VoidProto) {};

  // run a query
  rpc RunQuery(Query) returns (QueryResult) {};

  // get more results for a query
  rpc Next(NextRequest) returns (QueryResult) {};

  // get a query's histogram (not really, just a result count). this is the
  // total number of result for the query, *not* the number of results left
  // in the query.
  rpc Count(Query) returns (appengine_base.Integer64Proto) {};

  // get an explanation of the query plan that would be executed by RunQuery
  rpc Explain(Query) returns (QueryExplanation) {};

  // deletes a query cursor and flushes any associated state
  rpc DeleteCursor(Cursor) returns (appengine_base.VoidProto) {};

  // begin, commit, and rollback a transaction
  rpc BeginTransaction(appengine_base.VoidProto) returns (Transaction) {};
  rpc Commit(Transaction) returns (appengine_base.VoidProto) {};
  rpc Rollback(Transaction) returns (appengine_base.VoidProto) {};

  // makes an educated guess at an app's schema based on the entities in its
  // datastore. the request StringProto should contain the app id.
  rpc GetSchema(appengine_base.StringProto) returns (Schema) {};

  // create a new composite index. the request index's id should be 0. returns
  // the id assigned to the newly created index.
  rpc CreateIndex(appengine_entity.CompositeIndex)
      returns (appengine_base.Integer64Proto) {};

  // update a composite index's state. only the state field will be changed.
  // the index id field is ignored.
  //
  // this call is idempotent. if the index already has the desired state,
  // UpdateIndex is a noop.
  rpc UpdateIndex(appengine_entity.CompositeIndex)
      returns (appengine_base.VoidProto) {};

  // returns all composite indices defined for a given app. the request
  // StringProto should contain the app id.
  rpc GetIndices(appengine_base.StringProto) returns (CompositeIndices) {};

  // deletes a composite index definition. only the app_id and definition
  // fields of the CompositeIndex request PB are used.
  //
  // like UpdateIndex, this call is idempotent. deleting a nonexistent index
  // is a noop.
  //
  // note that this deletes the index definition, but it does *not* delete the
  // index's rows in the EntitiesByCompositeProperty index.
  rpc DeleteIndex(appengine_entity.CompositeIndex)
      returns (appengine_base.VoidProto) {};
}
